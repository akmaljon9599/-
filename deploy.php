<?php
/**
 * –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
 * –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
 */

class CourierDeliveryDeployment
{
    private $config;
    private $errors = [];
    private $warnings = [];

    public function __construct($configFile = 'deploy.json')
    {
        if (!file_exists($configFile)) {
            throw new Exception("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {$configFile} –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        $this->config = json_decode(file_get_contents($configFile), true);
        if (!$this->config) {
            throw new Exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
     */
    public function deploy()
    {
        echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã...\n\n";

        try {
            $this->checkRequirements();
            $this->backupExistingData();
            $this->copyModuleFiles();
            $this->installModule();
            $this->configureModule();
            $this->createInitialData();
            $this->setupPermissions();
            $this->runTests();
            
            $this->showResults();
            
        } catch (Exception $e) {
            echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
            $this->rollback();
            exit(1);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
     */
    private function checkRequirements()
    {
        echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...\n";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PHP
        if (version_compare(PHP_VERSION, '7.4.0') < 0) {
            throw new Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è PHP 7.4 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: " . PHP_VERSION);
        }
        echo "  ‚úì PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PHP
        $requiredExtensions = ['mysqli', 'curl', 'json', 'openssl', 'gd'];
        foreach ($requiredExtensions as $ext) {
            if (!extension_loaded($ext)) {
                throw new Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PHP: {$ext}");
            }
        }
        echo "  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–∏—è PHP: " . implode(', ', $requiredExtensions) . "\n";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
        $paths = [
            $_SERVER['DOCUMENT_ROOT'] . '/bitrix',
            $_SERVER['DOCUMENT_ROOT'] . '/local',
            $_SERVER['DOCUMENT_ROOT'] . '/upload'
        ];

        foreach ($paths as $path) {
            if (!is_writable($path)) {
                throw new Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤: {$path}");
            }
        }
        echo "  ‚úì –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º\n";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        $this->testDatabaseConnection();
        echo "  ‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";

        echo "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n\n";
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function backupExistingData()
    {
        echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n";

        $backupDir = $this->config['backup_dir'] ?? '/tmp/courier_delivery_backup_' . date('Y-m-d_H-i-s');
        
        if (!is_dir($backupDir)) {
            mkdir($backupDir, 0755, true);
        }

        // –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        $moduleDir = $_SERVER['DOCUMENT_ROOT'] . '/local/modules/courier.delivery';
        if (is_dir($moduleDir)) {
            $this->copyDirectory($moduleDir, $backupDir . '/module');
            echo "  ‚úì –ú–æ–¥—É–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—ç–∫–∞–ø\n";
        }

        // –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        $this->backupDatabase($backupDir . '/database.sql');
        echo "  ‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—ç–∫–∞–ø\n";

        $this->config['backup_dir'] = $backupDir;
        echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {$backupDir}\n\n";
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è
     */
    private function copyModuleFiles()
    {
        echo "üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è...\n";

        $sourceDir = __DIR__ . '/local/modules/courier.delivery';
        $targetDir = $_SERVER['DOCUMENT_ROOT'] . '/local/modules/courier.delivery';

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (is_dir($targetDir)) {
            $this->removeDirectory($targetDir);
        }

        // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        mkdir(dirname($targetDir), 0755, true);

        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        $this->copyDirectory($sourceDir, $targetDir);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        $this->setDirectoryPermissions($targetDir, 0755, 0644);

        echo "‚úÖ –§–∞–π–ª—ã –º–æ–¥—É–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã\n\n";
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ API –ë–∏—Ç—Ä–∏–∫—Å
     */
    private function installModule()
    {
        echo "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è...\n";

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —è–¥—Ä–æ –ë–∏—Ç—Ä–∏–∫—Å
        require_once($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_before.php');

        if (!is_object($GLOBALS['USER'])) {
            // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            $GLOBALS['USER'] = new CUser();
            $GLOBALS['USER']->Authorize(1); // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        require_once($_SERVER['DOCUMENT_ROOT'] . '/local/modules/courier.delivery/install/index.php');

        $moduleInstaller = new courier_delivery();
        
        if ($moduleInstaller->DoInstall()) {
            echo "  ‚úì –ú–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
        } else {
            throw new Exception("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è");
        }

        echo "‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n";
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è
     */
    private function configureModule()
    {
        echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è...\n";

        $moduleId = 'courier.delivery';
        $settings = $this->config['module_settings'] ?? [];

        foreach ($settings as $key => $value) {
            COption::SetOptionString($moduleId, $key, $value);
            echo "  ‚úì {$key}: " . (strlen($value) > 50 ? substr($value, 0, 50) . '...' : $value) . "\n";
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        $uploadDirs = [
            $_SERVER['DOCUMENT_ROOT'] . '/upload/courier_delivery',
            $_SERVER['DOCUMENT_ROOT'] . '/upload/courier_delivery/documents',
            $_SERVER['DOCUMENT_ROOT'] . '/upload/courier_delivery/photos',
            $_SERVER['DOCUMENT_ROOT'] . '/upload/courier_delivery/signatures',
            $_SERVER['DOCUMENT_ROOT'] . '/upload/logs'
        ];

        foreach ($uploadDirs as $dir) {
            if (!is_dir($dir)) {
                mkdir($dir, 0755, true);
            }
            chmod($dir, 0755);
        }

        echo "  ‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω—ã\n";
        echo "‚úÖ –ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n";
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function createInitialData()
    {
        echo "üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n";

        $connection = Bitrix\Main\Application::getConnection();

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        $branches = $this->config['initial_data']['branches'] ?? [];
        foreach ($branches as $branch) {
            $connection->query("
                INSERT IGNORE INTO courier_delivery_branches (NAME, ADDRESS, PHONE) 
                VALUES ('{$branch['name']}', '{$branch['address']}', '{$branch['phone']}')
            ");
        }
        echo "  ‚úì –§–∏–ª–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã: " . count($branches) . "\n";

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        $departments = $this->config['initial_data']['departments'] ?? [];
        foreach ($departments as $dept) {
            $connection->query("
                INSERT IGNORE INTO courier_delivery_departments (BRANCH_ID, NAME, CODE) 
                VALUES ({$dept['branch_id']}, '{$dept['name']}', '{$dept['code']}')
            ");
        }
        echo "  ‚úì –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã: " . count($departments) . "\n";

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π
        $this->createUsersAndRoles();

        echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã\n\n";
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     */
    private function setupPermissions()
    {
        echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...\n";

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –º–æ–¥—É–ª—è
        $operations = [
            'courier_delivery_view' => '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã',
            'courier_delivery_edit' => '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫',
            'courier_delivery_admin' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è'
        ];

        foreach ($operations as $code => $name) {
            $operation = COperation::GetByCode($code);
            if (!$operation->Fetch()) {
                COperation::Add([
                    'NAME' => $name,
                    'MODULE_ID' => 'courier.delivery',
                    'BINDING' => 'module'
                ]);
            }
        }

        echo "  ‚úì –û–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n";

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –≥—Ä—É–ø–ø–∞–º
        $this->assignGroupPermissions();

        echo "‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n";
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
     */
    private function runTests()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n";

        $tests = [
            'testDatabaseTables',
            'testModuleOptions',
            'testApiEndpoints',
            'testFilePermissions'
        ];

        foreach ($tests as $test) {
            try {
                $this->$test();
                echo "  ‚úì {$test}\n";
            } catch (Exception $e) {
                $this->warnings[] = "–¢–µ—Å—Ç {$test} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: " . $e->getMessage();
                echo "  ‚ö†Ô∏è {$test}: " . $e->getMessage() . "\n";
            }
        }

        echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n\n";
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
     */
    private function showResults()
    {
        echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n";

        echo "üìã –°–≤–æ–¥–∫–∞:\n";
        echo "  ‚Ä¢ –ú–æ–¥—É–ª—å: courier.delivery v1.0.0\n";
        echo "  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {$this->config['backup_dir']}\n";
        echo "  ‚Ä¢ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: " . date('Y-m-d H:i:s') . "\n";

        if (!empty($this->warnings)) {
            echo "\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n";
            foreach ($this->warnings as $warning) {
                echo "  ‚Ä¢ {$warning}\n";
            }
        }

        echo "\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n";
        echo "  ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: /bitrix/admin/courier_delivery_requests.php\n";
        echo "  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è: /bitrix/admin/courier_delivery_settings.php\n";
        echo "  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md\n";

        echo "\n‚ú® –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n";
    }

    /**
     * –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
     */
    private function rollback()
    {
        echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n";

        try {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª—å –∏–∑ –±—ç–∫–∞–ø–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (isset($this->config['backup_dir']) && is_dir($this->config['backup_dir'] . '/module')) {
                $targetDir = $_SERVER['DOCUMENT_ROOT'] . '/local/modules/courier.delivery';
                $this->removeDirectory($targetDir);
                $this->copyDirectory($this->config['backup_dir'] . '/module', $targetDir);
                echo "  ‚úì –ú–æ–¥—É–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞\n";
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (isset($this->config['backup_dir']) && file_exists($this->config['backup_dir'] . '/database.sql')) {
                $this->restoreDatabase($this->config['backup_dir'] . '/database.sql');
                echo "  ‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n";
            }

        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: " . $e->getMessage() . "\n";
        }

        echo "‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n";
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private function testDatabaseConnection()
    {
        $connection = new mysqli(
            $this->config['database']['host'] ?? 'localhost',
            $this->config['database']['user'] ?? 'root',
            $this->config['database']['password'] ?? '',
            $this->config['database']['name'] ?? 'bitrix'
        );

        if ($connection->connect_error) {
            throw new Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " . $connection->connect_error);
        }

        $connection->close();
    }

    private function copyDirectory($source, $destination)
    {
        if (!is_dir($destination)) {
            mkdir($destination, 0755, true);
        }

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $item) {
            $targetPath = $destination . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
            
            if ($item->isDir()) {
                mkdir($targetPath, 0755, true);
            } else {
                copy($item, $targetPath);
            }
        }
    }

    private function removeDirectory($dir)
    {
        if (!is_dir($dir)) return;

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::CHILD_FIRST
        );

        foreach ($iterator as $item) {
            if ($item->isDir()) {
                rmdir($item->getRealPath());
            } else {
                unlink($item->getRealPath());
            }
        }

        rmdir($dir);
    }

    private function setDirectoryPermissions($dir, $dirMode, $fileMode)
    {
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
        );

        foreach ($iterator as $item) {
            if ($item->isDir()) {
                chmod($item->getRealPath(), $dirMode);
            } else {
                chmod($item->getRealPath(), $fileMode);
            }
        }
    }

    private function backupDatabase($backupFile)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫–∞–ø–∞ –ë–î
        $tables = ['courier_delivery_requests', 'courier_delivery_couriers', 'courier_delivery_documents'];
        $sql = '';

        foreach ($tables as $table) {
            $sql .= "-- Backup for table {$table}\n";
            $sql .= "DROP TABLE IF EXISTS {$table}_backup;\n";
            $sql .= "CREATE TABLE {$table}_backup AS SELECT * FROM {$table};\n\n";
        }

        file_put_contents($backupFile, $sql);
    }

    private function restoreDatabase($backupFile)
    {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ SQL —Ñ–∞–π–ª–∞
        $sql = file_get_contents($backupFile);
        $connection = Bitrix\Main\Application::getConnection();
        $connection->query($sql);
    }

    private function createUsersAndRoles()
    {
        $users = $this->config['initial_data']['users'] ?? [];
        
        foreach ($users as $userData) {
            $user = new CUser();
            $userId = $user->Add([
                'LOGIN' => $userData['login'],
                'PASSWORD' => $userData['password'],
                'CONFIRM_PASSWORD' => $userData['password'],
                'NAME' => $userData['name'],
                'LAST_NAME' => $userData['last_name'],
                'EMAIL' => $userData['email'],
                'ACTIVE' => 'Y',
                'GROUP_ID' => $userData['groups'] ?? [2]
            ]);

            if ($userId) {
                echo "  ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {$userData['login']}\n";
            }
        }
    }

    private function assignGroupPermissions()
    {
        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –≥—Ä—É–ø–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $permissions = [
            'COURIER_ADMIN' => ['courier_delivery_view', 'courier_delivery_edit', 'courier_delivery_admin'],
            'COURIER_SENIOR' => ['courier_delivery_view', 'courier_delivery_edit'],
            'COURIER_OPERATOR' => ['courier_delivery_view', 'courier_delivery_edit'],
            'COURIER_DELIVERY' => ['courier_delivery_view']
        ];

        foreach ($permissions as $groupCode => $ops) {
            $groupId = COption::GetOptionString('courier.delivery', 'GROUP_' . $groupCode);
            if ($groupId) {
                foreach ($ops as $operation) {
                    CGroup::SetPermission($groupId, ['main' => ['*' => $operation]]);
                }
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private function testDatabaseTables()
    {
        $connection = Bitrix\Main\Application::getConnection();
        $tables = [
            'courier_delivery_requests',
            'courier_delivery_couriers',
            'courier_delivery_documents',
            'courier_delivery_branches'
        ];

        foreach ($tables as $table) {
            if (!$connection->isTableExists($table)) {
                throw new Exception("–¢–∞–±–ª–∏—Ü–∞ {$table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }
    }

    private function testModuleOptions()
    {
        $requiredOptions = ['abs_api_url', 'yandex_maps_api_key'];
        
        foreach ($requiredOptions as $option) {
            $value = COption::GetOptionString('courier.delivery', $option);
            if (empty($value)) {
                throw new Exception("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–ø—Ü–∏—è {$option}");
            }
        }
    }

    private function testApiEndpoints()
    {
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API endpoints
        $endpoints = [
            '/rest/courier.delivery.request.list',
            '/rest/courier.delivery.courier.location'
        ];

        foreach ($endpoints as $endpoint) {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if (!class_exists('Courier\\Delivery\\Controller\\ApiController')) {
                throw new Exception("API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }
    }

    private function testFilePermissions()
    {
        $paths = [
            $_SERVER['DOCUMENT_ROOT'] . '/upload/courier_delivery',
            $_SERVER['DOCUMENT_ROOT'] . '/upload/logs'
        ];

        foreach ($paths as $path) {
            if (!is_writable($path)) {
                throw new Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ {$path}");
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
if (php_sapi_name() === 'cli') {
    try {
        $deployment = new CourierDeliveryDeployment();
        $deployment->deploy();
    } catch (Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
        exit(1);
    }
} else {
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
    exit(1);
}