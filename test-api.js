#!/usr/bin/env node

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUsers = {
    admin: { username: 'admin', password: 'password123' },
    courier: { username: 'courier1', password: 'password123' },
    operator: { username: 'operator1', password: 'password123' }
};

let authToken = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, data = null, token = null) {
    try {
        const config = {
            method,
            url: `${API_BASE_URL}${endpoint}`,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);
        return { success: true, data: response.data, status: response.status };
    } catch (error) {
        return { 
            success: false, 
            error: error.response?.data?.error || error.message,
            status: error.response?.status 
        };
    }
}

// –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const loginResult = await makeRequest('POST', '/auth/login', testUsers.admin);
    if (loginResult.success) {
        console.log('‚úÖ –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω');
        authToken = loginResult.data.token;
        
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const meResult = await makeRequest('GET', '/auth/me', null, authToken);
        if (meResult.success) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É—Å–ø–µ—à–Ω–æ');
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${meResult.data.user.firstName} ${meResult.data.user.lastName}`);
            console.log(`   –†–æ–ª—å: ${meResult.data.user.role.name}`);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', meResult.error);
        }
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', loginResult.error);
        return false;
    }
    
    return true;
}

// –¢–µ—Å—Ç –∑–∞—è–≤–æ–∫
async function testRequests() {
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    const requestsResult = await makeRequest('GET', '/requests', null, authToken);
    if (requestsResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${requestsResult.data.requests.length}`);
        
        if (requestsResult.data.requests.length > 0) {
            const firstRequest = requestsResult.data.requests[0];
            console.log(`   –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞: ${firstRequest.requestNumber} (${firstRequest.client.name})`);
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
            const detailResult = await makeRequest('GET', `/requests/${firstRequest.id}`, null, authToken);
            if (detailResult.success) {
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏:', detailResult.error);
            }
        }
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫:', requestsResult.error);
    }
}

// –¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
async function testDashboard() {
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsResult = await makeRequest('GET', '/dashboard/stats', null, authToken);
    if (statsResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${statsResult.data.stats.total}`);
        console.log(`   –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${statsResult.data.stats.delivered}`);
        console.log(`   –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${statsResult.data.stats.inProgress}`);
        console.log(`   –û—Ç–∫–∞–∑–∞–Ω–æ: ${statsResult.data.stats.rejected}`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResult.error);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityResult = await makeRequest('GET', '/dashboard/recent-activity', null, authToken);
    if (activityResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${activityResult.data.activities.length}`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityResult.error);
    }
}

// –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function testUsers() {
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResult = await makeRequest('GET', '/users', null, authToken);
    if (usersResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResult.data.users.length}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
        const couriersResult = await makeRequest('GET', '/users/couriers/list', null, authToken);
        if (couriersResult.success) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${couriersResult.data.couriers.length}`);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤:', couriersResult.error);
        }
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResult.error);
    }
}

// –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function testSettings() {
    console.log('\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
    const branchesResult = await makeRequest('GET', '/settings/branches', null, authToken);
    if (branchesResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: ${branchesResult.data.branches.length}`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤:', branchesResult.error);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç
    const cardTypesResult = await makeRequest('GET', '/settings/card-types', null, authToken);
    if (cardTypesResult.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç: ${cardTypesResult.data.cardTypes.length}`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç:', cardTypesResult.error);
    }
}

// –¢–µ—Å—Ç health check
async function testHealthCheck() {
    console.log('\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
    
    const healthResult = await makeRequest('GET', '/health');
    if (healthResult.success) {
        console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω');
        console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResult.data.status}`);
        console.log(`   –í–µ—Ä—Å–∏—è: ${healthResult.data.version}`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ health check:', healthResult.error);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...\n');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        await testHealthCheck();
        
        // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const authSuccess = await testAuthentication();
        if (!authSuccess) {
            console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            return;
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await testRequests();
        await testDashboard();
        await testUsers();
        await testSettings();
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        
    } catch (error) {
        console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests();
}

module.exports = { runTests, makeRequest };